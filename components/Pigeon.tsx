"use client"

import React, {HTMLProps, useState} from "react";

type PigeonProps = {
	className?: HTMLProps<HTMLElement>["className"];
	color?: string;
}

export default function Pigeon(Props: PigeonProps) {
	const {className, color = "#D88DFF"} = Props
	const [position, setPosition] = useState({x: -20, y: -30});

	const handleMouseMove = (e: React.MouseEvent<SVGSVGElement, MouseEvent>) => {
		const svg = e.currentTarget;
		const rect = svg.getBoundingClientRect();
		const mouseX = e.clientX - rect.left;
		const mouseY = e.clientY - rect.top;

		// Center coordinates of the circle
		const circleCenterX = 345;
		const circleCenterY = 240;
		const circleRadius = 60; // Adjust this based on the actual radius of your circle

		// Calculate distance from the circle center
		const dx = mouseX - circleCenterX;
		const dy = mouseY - circleCenterY;
		const distance = Math.sqrt(dx * dx + dy * dy);

		// Restrict the small circle inside the large circle
		if (distance < circleRadius) {
			setPosition({x: dx, y: dy});
		} else {
			const angle = Math.atan2(dy, dx);
			setPosition({x: Math.cos(angle) * circleRadius, y: Math.sin(angle) * circleRadius});
		}
	};

	return (
		<>
			<svg className={className}
				 width="549" height="473" viewBox="0 0 549 473" fill="none" xmlns="http://www.w3.org/2000/svg"
				 onMouseMove={handleMouseMove}>
				<path
					d="M127.405 286.567C127.318 292.011 127.444 297.482 127.116 302.909C124.922 339.396 123.975 376.033 119.965 412.318C116.575 442.973 110.916 473.554 103.822 503.565C97.1533 531.78 87.9164 559.454 75.1724 585.618C73.875 588.274 72.1033 590.991 69.8856 592.785C65.6658 596.19 60.8205 596.625 56.4841 592.905C52.4254 589.401 51.882 584.834 53.9571 579.88C57.15 572.295 60.84 564.876 63.4489 557.095C70.4664 536.138 78.1869 515.308 83.4582 493.867C88.8873 471.779 92.3225 449.111 95.56 426.547C98.2171 408.068 99.1508 389.327 101.167 370.739C101.641 366.346 100.088 364.691 96.4234 363.263C80.6742 357.118 67.2208 347.269 57.7777 332.976C52.8433 325.5 50.1619 316.272 47.371 307.535C46.0596 303.429 44.9628 301.228 40.4301 301.172C32.2664 301.067 27.0968 296.136 24.4966 288.528C22.0328 281.35 26.1418 276.572 31.024 272.201C50.146 255.094 69.0082 237.695 88.3891 220.895C95.637 214.608 104.093 209.821 111.788 204.05C114.011 202.375 116.207 199.963 117.244 197.393C123.473 181.912 128.667 165.954 135.522 150.791C146.218 127.102 160.747 105.747 179.076 87.7857C199.064 68.2034 221.45 51.8687 247.501 41.4931C285.215 26.4418 324.231 19.0154 364.448 21.6888C381.93 22.855 399.603 26.4763 416.395 31.6664C439.412 38.7733 459.517 52.1049 476.544 69.8245C505.231 99.6758 520.617 136.075 527.928 177.274C535.539 220.226 534.166 263.189 530.29 306.141C527.176 340.623 521.713 374.893 517.16 409.239C514.077 432.535 510.199 455.738 507.671 479.085C504.049 512.429 500.45 545.814 498.51 579.285C497.085 603.796 498.32 628.447 498.351 653.043C498.358 655 498.313 656.993 497.993 658.915C496.997 665.006 492.246 669.137 486.52 669.053C481.087 668.975 476.783 664.969 476.64 658.42C476.226 639.497 475.967 620.545 476.265 601.617C476.54 583.988 477.334 566.367 478.395 548.765C479.079 537.492 480.725 526.271 481.802 515.012C482.569 507.041 482.667 498.985 483.786 491.064C488.304 458.936 493.225 426.861 497.743 394.732C501.085 371.007 504.843 347.31 506.973 323.464C509.355 296.824 511.149 270.027 511.288 243.302C511.421 215.894 509.635 188.488 502.414 161.791C493.17 127.592 477.176 97.757 449.96 75.4896C429.596 58.8186 405.897 49.9717 380.189 46.0316C339.98 39.8659 301.04 46.155 263.172 59.7253C227.375 72.5424 198.037 95.2887 175.466 126.987C159.296 149.676 147.059 174.364 139.522 201.509C132.388 227.211 129.758 253.571 128.109 280.089C127.963 282.259 127.816 284.429 127.67 286.598C127.581 286.592 127.506 286.587 127.417 286.581L127.405 286.567ZM105.648 285.664L109.094 234.582L107.987 233.089C90.3697 248.235 72.7532 263.368 55.1358 278.515C55.4006 279.11 55.6537 279.692 55.9185 280.288C72.1157 282.05 88.3139 283.799 105.634 285.677L105.648 285.664ZM104.883 308.487C92.6085 306.976 81.0899 305.556 69.4827 304.129C70.3491 318.224 87.659 336.646 102.745 340.185L104.883 308.487Z"
					fill={color}/>
				<path
					d="M342.524 107.833C404.319 111.792 451.508 164.438 448.687 229.797C445.829 295.718 396.41 340.745 338.244 342.521C265.803 344.738 222.365 283.769 221.426 229.673C220.101 153.057 281.911 102.917 342.524 107.833ZM243.949 220.175C238.507 270.52 280.106 319.94 334.401 320.175C380.528 320.372 426.367 283.585 426.967 225.325C427.477 176.697 391.417 131.445 336.946 129.858C289.844 128.493 245.341 168.455 243.949 220.175Z"
					fill={color}/>
				<path
					d="M315.059 219.884C315.597 210.4 321.693 204.797 330.814 205.413C338.53 205.933 344.391 212.29 344.124 219.822C343.823 228.061 335.069 236.137 326.968 235.669C319.069 235.215 314.532 229.197 315.059 219.884Z"
					fill={color}
					transform={`translate(${position.x}, ${position.y})`}/>
			</svg>
		</>
	)
}